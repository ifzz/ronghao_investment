PROJECT_DEPS_NODIR := $(notdir $(PROJECT_DEPS))
PROJECT_OBJS_NODIR := $(notdir $(PROJECT_OBJS))

P_RELEASE_DEPS := $(addprefix $(PROJECT_OUT_PATH)./release/,$(PROJECT_DEPS_NODIR)) 
P_RELEASE_OBJS := $(addprefix $(PROJECT_OUT_PATH)./release/,$(PROJECT_OBJS_NODIR) )

RELEASE_X = $(PROJECT_OUT_PATH)./release/makefile.d
PROJECT_SONAME=lib$(PROJECT_BASENAME)-$(PROJECT_VERSION_MAJOR).$(PROJECT_VERSION_MINOR).so
PROJECT_OBJ=$(PROJECT_PATH)/$(PROJECT_BASENAME).$(PROJECT_TYPE)

REAL_LINK_FLAG=
REAL_LINK_CC= @echo 
REAL_LINK_TYPE= error
REAL_LINK_LIB= "unknown PROJECT_TYPE" $(PROJECT_TYPE)
REAL_LINK_DLL=
REAL_RANLIB=
REAL_LIB_NAME=
REAL_SYMBOL_SONAME=

ifeq ($(PROJECT_TYPE),exe) 
	REAL_LINK_CC= $(PROJECT_LINKER)
	REAL_LINK_FLAG= $(PROJECT_EXE_LINK_FLAGS) #-Wl,-Map,$(PROJECT_MAPFILE)
	REAL_LINK_TYPE= -O3 -o
	REAL_LINK_LIB= $(PROJECT_IMPORT_LIB_RELEASE)
	REAL_LINK_DLL= $(PROJECT_IMPORT_DLL)
else
ifeq ($(PROJECT_TYPE),dll)
	PROJECT_OBJ= $(PROJECT_PATH)/lib$(PROJECT_BASENAME)-$(PROJECT_VERSION).$(PROJECT_TYPE)
	REAL_LINK_CC= $(PROJECT_LINKER)
	REAL_LINK_FLAG= $(PROJECT_DLL_LINK_FLAGS) -Wl,-soname,$(PROJECT_SONAME)
	REAL_LINK_TYPE= -O3 -o
	REAL_LINK_LIB= $(PROJECT_IMPORT_LIB_RELEASE)
	REAL_LINK_DLL= $(PROJECT_IMPORT_DLL)
	REAL_RANLIB= $(BUILD_TOOLS_DIR)$(BUILD_PREFIX)strip
	REAL_LIB_NAME= $(PROJECT_OBJ)
	REAL_SYMBOL_SONAME= \
		sh dolink.sh  $(PROJECT_PATH)  lib$(PROJECT_BASENAME)-$(PROJECT_VERSION).$(PROJECT_TYPE)  $(PROJECT_SONAME) lib$(PROJECT_BASENAME).so
else
ifeq ($(PROJECT_TYPE),so)
	PROJECT_OBJ= $(PROJECT_PATH)/lib$(PROJECT_BASENAME)-$(PROJECT_VERSION).$(PROJECT_TYPE)
	REAL_LINK_CC= $(PROJECT_LINKER)
	REAL_LINK_FLAG= $(PROJECT_DLL_LINK_FLAGS) -Wl,-soname,$(PROJECT_SONAME)
	REAL_LINK_TYPE= -O3 -o
	REAL_LINK_LIB= $(PROJECT_IMPORT_LIB_RELEASE)
	REAL_LINK_DLL= $(PROJECT_IMPORT_DLL)
	REAL_RANLIB= $(BUILD_TOOLS_DIR)$(BUILD_PREFIX)strip
	REAL_LIB_NAME= $(PROJECT_OBJ)
	REAL_SYMBOL_SONAME= \
		sh dolink.sh  $(PROJECT_PATH)  lib$(PROJECT_BASENAME)-$(PROJECT_VERSION).so  $(PROJECT_SONAME) lib$(PROJECT_BASENAME).so

else
ifeq ($(PROJECT_TYPE),lib)
	REAL_LINK_CC= $(PROJECT_AR)
	REAL_RANLIB= ranlib
	REAL_LIB_NAME= $(PROJECT_OBJ)
endif
endif
endif
endif


all : $(PROJECT_OBJ)

$(PROJECT_OBJ) : $(RELEASE_X) $(P_RELEASE_DEPS) $(P_RELEASE_OBJS) 
	$(REAL_LINK_CC) $(REAL_LINK_FLAG) $(REAL_LINK_TYPE) $@ $(P_RELEASE_OBJS) $(REAL_LINK_LIB) $(REAL_LINK_DLL)
	$(REAL_RANLIB) $(REAL_LIB_NAME)
	$(REAL_SYMBOL_SONAME)
#	$(REAL_SYMBOL_SO)
#	$(DEV_LIB_NAME)

$(RELEASE_X) : $(PROJECT_SRC_FILES) 
	@echo "MAKE $@ ... please wait!"
	@echo "" > $@
	@for fname in $(PROJECT_SRC_FILES); do sh ./depend.sh "$(PROJECT_CC)" "$(PROJECT_CXX)" "$(PROJECT_CC_FLAGS)" "$(PROJECT_CXX_FLAGS)" "$(PROJECT_DEF_RELEASE)" "$$fname" "$(PROJECT_OUT_PATH)./release" "release"; done
	@echo "MAKE $@ ok."

depend: $(RELEASE_X) $(P_RELEASE_DEPS)
	@echo "Dependencies are now up-to-date"

-include $(RELEASE_X) $(P_RELEASE_DEPS)

.PHONY: clean
clean: 
	@-rm -f $(PROJECT_OBJ)
	@-rm -f $(PROJECT_PATH)/$(PROJECT_SONAME)
	@-rm -f $(PROJECT_PATH)/lib$(PROJECT_BASENAME).$(PROJECT_TYPE)
	@-rm -rf $(PROJECT_OUT_PATH)./release/*

