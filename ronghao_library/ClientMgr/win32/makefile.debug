PROJECT_DEPS_NODIR := $(notdir $(PROJECT_DEPS))
PROJECT_OBJS_NODIR := $(notdir $(PROJECT_OBJS))

P_DEBUG_DEPS := $(addprefix $(PROJECT_OUT_PATH)./debug/,$(PROJECT_DEPS_NODIR)) 
P_DEBUG_OBJS := $(addprefix $(PROJECT_OUT_PATH)./debug/,$(PROJECT_OBJS_NODIR) )

DEBUG_X = $(PROJECT_OUT_PATH)./debug/makefile.d
PROJECT_OBJ=$(PROJECT_PATH)/$(PROJECT_BASENAME)D.$(PROJECT_TYPE)
#PROJECT_SONAME=$(PROJECT_BASENAME)D.$(PROJECT_TYPE).$(PROJECT_VERSION_MAJOR).$(PROJECT_VERSION_MINOR)
PROJECT_SONAME=$(PROJECT_BASENAME)D.$(PROJECT_TYPE)
PROJECT_MAPFILE=$(PROJECT_PATH)/$(PROJECT_BASENAME)D.map

REAL_LINK_FLAG=
REAL_LINK_CC= @echo 
REAL_LINK_TYPE= error
REAL_LINK_LIB= "unknown PROJECT_TYPE" $(PROJECT_TYPE)
REAL_LINK_DLL=
REAL_RANLIB=
REAL_LIB_NAME=
REAL_SYMBOL_SONAME=
DEV_SYMBOL_SO=
REAL_SYMBOL_SO=

ifeq ($(PROJECT_TYPE),exe) 
	REAL_LINK_CC= $(PROJECT_LINKER)
	REAL_LINK_FLAG= $(PROJECT_EXE_LINK_FLAGS) #-Wl,-Map,$(PROJECT_MAPFILE)
	REAL_LINK_TYPE= -g -o
	REAL_LINK_LIB= $(PROJECT_IMPORT_LIB_DEBUG)
	REAL_LINK_DLL= $(PROJECT_IMPORT_DLL)
else
ifeq ($(PROJECT_TYPE),dll)
	PROJECT_OBJ= $(PROJECT_PATH)/$(PROJECT_BASENAME)D.$(PROJECT_TYPE)
	REAL_LINK_CC= $(PROJECT_LINKER)
	REAL_LINK_FLAG= $(PROJECT_DLL_LINK_FLAGS) -Wl,-soname,$(PROJECT_SONAME) -Wl,--out-implib,$(PROJECT_PATH)/$(PROJECT_BASENAME)D.lib -Wl,-Map,$(PROJECT_MAPFILE)  -Wl,--output-def,$(PROJECT_PATH)/$(PROJECT_BASENAME)D.def
	REAL_LINK_TYPE= -g -o
	REAL_LINK_LIB= $(PROJECT_IMPORT_LIB_DEBUG)
	REAL_LINK_DLL= $(PROJECT_IMPORT_DLL)
	REAL_SYMBOL_SONAME= ln -sf $(PROJECT_BASENAME)D.$(PROJECT_TYPE).$(PROJECT_VERSION) $(PROJECT_PATH)/$(PROJECT_SONAME)
	REAL_SYMBOL_SO= ln -sf $(PROJECT_SONAME) $(PROJECT_PATH)/$(PROJECT_BASENAME)D.$(PROJECT_TYPE)
	#lib /machine:i386 /def:testdll.def
else
ifeq ($(PROJECT_TYPE),so)
	PROJECT_OBJ= $(PROJECT_PATH)/$(PROJECT_BASENAME)D.$(PROJECT_TYPE)
	REAL_LINK_CC= $(PROJECT_LINKER)
	REAL_LINK_FLAG= $(PROJECT_DLL_LINK_FLAGS) -Wl,-soname,$(PROJECT_SONAME) #-Wl,-Map,$(PROJECT_MAPFILE)
	REAL_LINK_TYPE= -g -o
	REAL_LINK_LIB= $(PROJECT_IMPORT_LIB_DEBUG)
	REAL_LINK_DLL= $(PROJECT_IMPORT_DLL)
	REAL_SYMBOL_SONAME= ln -sf $(PROJECT_BASENAME)D.$(PROJECT_TYPE).$(PROJECT_VERSION) $(PROJECT_PATH)/$(PROJECT_SONAME)
	REAL_SYMBOL_SO= ln -sf $(PROJECT_SONAME) $(PROJECT_PATH)/$(PROJECT_BASENAME)D.$(PROJECT_TYPE)
else
ifeq ($(PROJECT_TYPE),lib)
	REAL_LINK_TYPE=
	REAL_LINK_CC= $(PROJECT_AR)
	REAL_RANLIB= ranlib
	REAL_LIB_NAME= $(PROJECT_OBJ)
	REAL_LINK_LIB=
endif
endif
endif
endif


all : $(PROJECT_OBJ)

$(PROJECT_OBJ) : $(DEBUG_X) $(P_DEBUG_DEPS) $(P_DEBUG_OBJS) 
	@echo "$(REAL_LINK_CC) $(REAL_LINK_FLAG) $(REAL_LINK_TYPE) $@ $(P_DEBUG_OBJS) $(REAL_LINK_LIB) $(REAL_LINK_DLL)"
	$(REAL_LINK_CC) $(REAL_LINK_FLAG) $(REAL_LINK_TYPE) $@ $(P_DEBUG_OBJS) $(REAL_LINK_LIB) $(REAL_LINK_DLL)
	$(REAL_RANLIB) $(REAL_LIB_NAME)
#	$(REAL_SYMBOL_SONAME)
#	$(REAL_SYMBOL_SO)

$(DEBUG_X) : $(PROJECT_SRC_FILES) 
	@echo "MAKE $@ ... please wait!"
	@echo "" > $@
	@for fname in $(PROJECT_SRC_FILES); do sh ./depend.sh "$(PROJECT_CC)" "$(PROJECT_CXX)" "$(PROJECT_CC_FLAGS)" "$(PROJECT_CXX_FLAGS)" "$(PROJECT_DEF_DEBUG)" "$$fname" "$(PROJECT_OUT_PATH)./debug" debug; done
	@echo "MAKE $@ ok."

depend: $(DEBUG_X) $(P_DEBUG_DEPS)
	@echo "Dependencies are now up-to-date"

-include $(DEBUG_X) $(P_DEBUG_DEPS)

.PHONY: clean
clean: 
	@-rm -f $(PROJECT_OBJ)
	@-rm -f $(PROJECT_MAPFILE)
	@-rm -f $(PROJECT_PATH)/$(PROJECT_SONAME)
	@-rm -f $(PROJECT_PATH)/$(PROJECT_BASENAME)D.$(PROJECT_TYPE)
	@-rm -rf $(PROJECT_OUT_PATH)./debug/*

