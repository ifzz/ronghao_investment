生产环境的设计和测试环境类似，其中许多功能会有重叠，所不同的是，因为策略库在测试环境中经过了严格的测试，
所以一般来讲不会出什么问题，这样在生产环境中上线时只要实时创建一个新的线程就可以了，所以生产环境只需要
produce这一个程序，另外还有一个问题就是produce涉及实盘的买卖，一旦要紧急下线一个策略，那么响应
时间必须限制在毫秒级，基于以上分析，在设计生产环境时不需要再用到notify程序，同时因为java web程序有可能
和produce不在同一台主机上，所以在produce中使用socket套接字作为web程序和produce之间的基础设施，所有的
上线下线行为都由web程序命令produce完成。

这样produce和web程序之间的配置接口实际上就是一系列的字符串指令，而且实时性很高，而统计分析接口（这里的
统计分析我理解的应该是业务上的指标）那么就直接在策略实现文件中写日志就可以了，还有一个问题是有可能这个
策略库是运行在其他程序中的，那么可以设计一系列的虚接口，当在execute中发生买卖行为，立即将各个接口需要的
信息传递到这些接口当中，其他程序在设计时只要实现这些虚接口就能实时接收统计数据。

灾备、异常，这个可以在程序核心功能完成之后进一步完善，一般来说，需要在服务器上7×24小时运行的程序都会被
设置成守护进程，这样在系统重启之后这些程序可以自动加载。

测试环境和生产环境分离，各分成唯一一份，测试环境中以加载进程的方式，在子进程中对策略进行测试，
待测试的策略分为技术指标和业务指标信息的统计

技术指标：内存和cpu的均值和最大值最小值，文件句柄数，磁盘占用量，网络IO（可以忽略），配置测试环境的时候对
				前述技术指标做一些物理上的限制

业务指标：按照具体策略中指定的方式做输出，后续在改进，给历史行情服务器预留一个接口，在历史回测时需要指定一个
 				时间段，其他配置和实盘运行一样

对生产环境测试一下当前的技术指标，为以后的生产环境提供一些参考信息，每台服务器根据这些技术指标
进行配置